import React, { useMemo, useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  BarChart,
  Bar,
  PieChart,
  Pie,
} from "recharts";

// =============================================================
// ✅ Utils básicos
// =============================================================
const k = (n: number) => new Intl.NumberFormat("es-AR").format(n);
const pct = (n: number) => `${n.toFixed(1)}%`;

// Vista por consola para validar el preview rápidamente
function useConsolePreview(data: any) {
  useEffect(() => {
    console.group("[Preview] KPIs");
    console.table(data.kpis);
    console.groupEnd();

    console.group("[Preview] byLocation");
    console.table(
      data.byLocation.map((x: any) => ({
        code: x.location_code,
        assets: x.assets_total,
        alarms: x.alarms_active,
        avgFlow: x.avg_flow_lpm_30d,
        avgLevel: x.avg_level_pct_30d,
      }))
    );
    console.groupEnd();

    console.group("[Preview] Latest – Tanks");
    console.table(data.latest.tanks);
    console.groupEnd();

    console.group("[Preview] Latest – Pumps");
    console.table(data.latest.pumps);
    console.groupEnd();
  }, [data]);
}

// =============================================================
// ✅ MOCK DATA (hardcodeado)
// =============================================================
const MOCK_DATA = {
  generated_at: "2025-09-18T12:00:00",
  org: { id: 1, name: "MUNICIPALIDAD RDLS" },
  kpis: {
    assets_total: 10,
    tanks: 3,
    pumps: 3,
    valves: 2,
    manifolds: 1,
    alarms_active: 1,
    alarms_critical_active: 0,
    avg_flow_lpm_30d: 83.2,
    avg_level_pct_30d: 61.5,
  },
  locations: [
    { location_id: 10, location_code: "PT-PLANTA", location_name: "Planta Principal" },
    { location_id: 20, location_code: "PT-NORTE", location_name: "Pozo Norte" },
    { location_id: 30, location_code: "PT-SUR", location_name: "Pozo Sur" },
    { location_id: 40, location_code: "DEP-CENTRO", location_name: "Depósito Centro" },
  ],
  byLocation: [
    {
      location_id: 10,
      location_code: "PT-PLANTA",
      location_name: "Planta Principal",
      assets_total: 5,
      tanks_count: 1,
      pumps_count: 1,
      valves_count: 1,
      manifolds_count: 1,
      alarms_active: 1,
      alarms_critical_active: 0,
      pump_readings_30d: 48,
      avg_flow_lpm_30d: 88.3,
      avg_pressure_bar_30d: 2.6,
      pumps_last_seen: "2025-09-18T12:00:00",
      tank_readings_30d: 48,
      avg_level_pct_30d: 63.4,
      tanks_last_seen: "2025-09-18T12:00:00",
    },
    {
      location_id: 20,
      location_code: "PT-NORTE",
      location_name: "Pozo Norte",
      assets_total: 2,
      tanks_count: 1,
      pumps_count: 1,
      valves_count: 1,
      manifolds_count: 0,
      alarms_active: 0,
      alarms_critical_active: 0,
      pump_readings_30d: 48,
      avg_flow_lpm_30d: 79.1,
      avg_pressure_bar_30d: 2.4,
      pumps_last_seen: "2025-09-18T12:00:00",
      tank_readings_30d: 48,
      avg_level_pct_30d: 58.2,
      tanks_last_seen: "2025-09-18T12:00:00",
    },
    {
      location_id: 30,
      location_code: "PT-SUR",
      location_name: "Pozo Sur",
      assets_total: 2,
      tanks_count: 1,
      pumps_count: 1,
      valves_count: 0,
      manifolds_count: 0,
      alarms_active: 0,
      alarms_critical_active: 0,
      pump_readings_30d: 48,
      avg_flow_lpm_30d: 82.2,
      avg_pressure_bar_30d: 2.5,
      pumps_last_seen: "2025-09-18T12:00:00",
      tank_readings_30d: 48,
      avg_level_pct_30d: 62.0,
      tanks_last_seen: "2025-09-18T12:00:00",
    },
    {
      location_id: 40,
      location_code: "DEP-CENTRO",
      location_name: "Depósito Centro",
      assets_total: 1,
      tanks_count: 0,
      pumps_count: 0,
      valves_count: 0,
      manifolds_count: 0,
      alarms_active: 0,
      alarms_critical_active: 0,
      pump_readings_30d: 0,
      avg_flow_lpm_30d: null,
      avg_pressure_bar_30d: null,
      pumps_last_seen: null,
      tank_readings_30d: 0,
      avg_level_pct_30d: null,
      tanks_last_seen: null,
    },
  ],
  assets: {
    tanks: [
      { id: 1, name: "Tank 1", capacity_liters: 50000, location_id: 10, fluid: "Agua Potable" },
      { id: 2, name: "Tank 2", capacity_liters: 30000, location_id: 20, fluid: "Agua Potable" },
      { id: 3, name: "Tank 3", capacity_liters: 45000, location_id: 30, fluid: "Agua Cruda" },
    ],
    pumps: [
      { id: 101, name: "Bomba A", rated_kw: 7.5, drive_type: "vfd", location_id: 10, group_id: 1 },
      { id: 102, name: "Bomba B", rated_kw: 5.5, drive_type: "soft", location_id: 20, group_id: 1 },
      { id: 103, name: "Bomba C", rated_kw: 11.0, drive_type: "direct", location_id: 30, group_id: 2 },
    ],
    valves: [
      { id: 201, name: "Válvula 1", default_state: "open", diameter_mm: 80, location_id: 10 },
      { id: 202, name: "Válvula 2", default_state: "closed", diameter_mm: 100, location_id: 20 },
    ],
    manifolds: [{ id: 301, name: "Colector Principal", location_id: 10 }],
  },
  latest: {
    tanks: [
      { tank_id: 1, ts: "2025-09-18T12:00:00", level_percent: 67.4, volume_l: 33700, temperature_c: 18.1 },
      { tank_id: 2, ts: "2025-09-18T12:00:00", level_percent: 55.1, volume_l: 16530, temperature_c: 17.6 },
      { tank_id: 3, ts: "2025-09-18T12:00:00", level_percent: 62.0, volume_l: 27900, temperature_c: 16.9 },
    ],
    pumps: [
      {
        pump_id: 101,
        ts: "2025-09-18T12:00:00",
        is_on: true,
        flow_lpm: 92.4,
        pressure_bar: 2.7,
        voltage_v: 380,
        current_a: 12.3,
        control_mode: "auto",
        manual_lockout: false,
      },
      {
        pump_id: 102,
        ts: "2025-09-18T12:00:00",
        is_on: false,
        flow_lpm: 0,
        pressure_bar: 0.5,
        voltage_v: 0,
        current_a: 0,
        control_mode: "auto",
        manual_lockout: false,
      },
      {
        pump_id: 103,
        ts: "2025-09-18T12:00:00",
        is_on: true,
        flow_lpm: 88.1,
        pressure_bar: 2.6,
        voltage_v: 380,
        current_a: 18.0,
        control_mode: "auto",
        manual_lockout: false,
      },
    ],
  },
  timeseries: {
    tanks: {
      "1": {
        timestamps: Array.from({ length: 24 }).map((_, i) => `2025-09-17T${(i + 1).toString().padStart(2, "0")}:00:00`),
        level_percent: Array.from({ length: 24 }).map(
          (_, i) => 60 + Math.round(8 * Math.sin(i / 3) + (Math.random() * 4 - 2))
        ),
        volume_l: Array.from({ length: 24 }).map(
          (_, i) => Math.round(50000 * (0.5 + Math.sin(i / 12) * 0.1))
        ),
        temperature_c: Array.from({ length: 24 }).map((_, i) => 16 + Math.round(10 * Math.sin(i / 10))),
      },
      "2": {
        timestamps: Array.from({ length: 24 }).map((_, i) => `2025-09-17T${(i + 1).toString().padStart(2, "0")}:00:00`),
        level_percent: Array.from({ length: 24 }).map(
          (_, i) => 55 + Math.round(6 * Math.sin(i / 2) + (Math.random() * 3 - 1.5))
        ),
        volume_l: Array.from({ length: 24 }).map(
          (_, i) => Math.round(30000 * (0.4 + Math.sin(i / 9) * 0.08))
        ),
        temperature_c: Array.from({ length: 24 }).map((_, i) => 17 + Math.round(8 * Math.sin(i / 9))),
      },
      "3": {
        timestamps: Array.from({ length: 24 }).map((_, i) => `2025-09-17T${(i + 1).toString().padStart(2, "0")}:00:00`),
        level_percent: Array.from({ length: 24 }).map(
          (_, i) => 62 + Math.round(5 * Math.sin(i / 2.5) + (Math.random() * 2 - 1))
        ),
        volume_l: Array.from({ length: 24 }).map(
          (_, i) => Math.round(45000 * (0.45 + Math.sin(i / 8) * 0.07))
        ),
        temperature_c: Array.from({ length: 24 }).map((_, i) => 16 + Math.round(7 * Math.sin(i / 8))),
      },
    },
    pumps: {
      "101": {
        timestamps: Array.from({ length: 24 }).map((_, i) => `2025-09-17T${(i + 1).toString().padStart(2, "0")}:00:00`),
        is_on: Array.from({ length: 24 }).map((_, i) => (i % 6) < 3),
        // power_kw se completa más abajo con buildPowerFromIsOn
      },
      "102": {
        timestamps: Array.from({ length: 24 }).map((_, i) => `2025-09-17T${(i + 1).toString().padStart(2, "0")}:00:00`),
        is_on: Array.from({ length: 24 }).map((_, i) => (i % 7) < 2),
      },
      "103": {
        timestamps: Array.from({ length: 24 }).map((_, i) => `2025-09-17T${(i + 1).toString().padStart(2, "0")}:00:00`),
        is_on: Array.from({ length: 24 }).map((_, i) => (i % 5) < 3),
      },
    },
  },
  analytics30d: {
    pump_uptime: {
      "101": { pump_id: 101, pump_name: "Bomba A", on_seconds: 12 * 3600, total_seconds: 24 * 3600, uptime_pct_30d: 50.0 },
      "102": { pump_id: 102, pump_name: "Bomba B", on_seconds: 8 * 3600, total_seconds: 24 * 3600, uptime_pct_30d: 33.3 },
      "103": { pump_id: 103, pump_name: "Bomba C", on_seconds: 15 * 3600, total_seconds: 24 * 3600, uptime_pct_30d: 62.5 },
    },
    pump_energy_kwh: {
      "101": { pump_id: 101, kwh_30d: 62.3 },
      "102": { pump_id: 102, kwh_30d: 41.8 },
      "103": { pump_id: 103, kwh_30d: 108.6 },
    },
  },
  topology: {
    edges: [
      {
        id: 1,
        from_type: "tank",
        from_id: 1,
        from_name: "Tank 1",
        to_type: "pump",
        to_id: 101,
        to_name: "Bomba A",
        pipe_diameter_mm: 80,
        length_m: 35,
        is_active: true,
        from_location_id: 10,
        to_location_id: 10,
      },
      {
        id: 2,
        from_type: "pump",
        from_id: 101,
        from_name: "Bomba A",
        to_type: "manifold",
        to_id: 301,
        to_name: "Colector Principal",
        pipe_diameter_mm: 100,
        length_m: 20,
        is_active: true,
        from_location_id: 10,
        to_location_id: 10,
      },
    ],
    nodes: [
      { type: "tank", asset_id: 1, name: "Tank 1", code: "T-001", level_ratio: 0.67, capacity_liters: 50000, location_id: 10 },
      { type: "pump", asset_id: 101, name: "Bomba A", code: "P-101", pump_status: "on", rated_kw: 7.5, location_id: 10 },
      { type: "valve", asset_id: 201, name: "Válvula 1", code: "V-201", valve_state: "open", location_id: 10 },
      { type: "manifold", asset_id: 301, name: "Colector Principal", code: "M-301", location_id: 10 },
    ],
  },
  alarms: [
    {
      id: 1666,
      asset_type: "tank",
      asset_id: 1,
      code: "LOW",
      severity: "warning",
      message: "Tank 1 LOW",
      ts_raised: "2025-09-15T02:00:00",
      is_active: true,
      extra: { value: 28.0, threshold: "low" },
    },
    {
      id: 1667,
      asset_type: "tank",
      asset_id: 1,
      code: "LEVEL",
      severity: "critical",
      message: "Nivel 100% ≥ 80.00% (Muy alto)",
      ts_raised: "2025-09-17T08:00:00",
      is_active: false,
      extra: { level_percent: 100, threshold: "very_high" },
    },
  ],
};

// =============================================================
// ✅ Energía: bandas horarias y kW
// =============================================================
// VALLE: 00-07h, PICO: 19-23h, RESTO: 07-19h (demo)
const bandForHour = (h: number) => {
  if (h >= 0 && h < 7) return "VALLE" as const;
  if (h >= 19 && h < 23) return "PICO" as const;
  return "RESTO" as const;
};

function buildPowerFromIsOn(data: any) {
  for (const p of data.assets.pumps) {
    const ts = data.timeseries.pumps[String(p.id)];
    if (!ts) continue;
    ts.power_kw = ts.is_on.map((on: boolean) => {
      const base = on ? p.rated_kw * 0.82 : 0.1; // 0.82 factor de carga aprox; 0.1 kW standby
      const jitter = on ? (Math.random() * 0.2 - 0.1) * p.rated_kw : 0; // ±10%
      return Math.max(0, Number((base + jitter).toFixed(2)));
    });
  }
}

function kwhByBandForPump(pumpTs: any) {
  if (!pumpTs?.power_kw) return { VALLE: 0, PICO: 0, RESTO: 0, total: 0 };
  const acc: Record<"VALLE" | "PICO" | "RESTO", number> = { VALLE: 0, PICO: 0, RESTO: 0 };
  pumpTs.timestamps.forEach((t: string, i: number) => {
    const h = Number(t.slice(11, 13));
    const band = bandForHour(h);
    const kwh = pumpTs.power_kw[i]; // 1 hora por punto
    acc[band] += kwh;
  });
  const total = acc.VALLE + acc.PICO + acc.RESTO;
  return { ...acc, total };
}

// Construir power_kw
buildPowerFromIsOn(MOCK_DATA);

// =============================================================
// ✅ Componentes UI
// =============================================================
function KPI({ label, value, sub }: { label: string; value: React.ReactNode; sub?: string }) {
  return (
    <Card className="rounded-2xl shadow-sm">
      <CardHeader className="pb-2">
        <CardTitle className="text-sm text-gray-500 font-medium">{label}</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="text-3xl font-semibold">{value}</div>
        {sub && <div className="text-xs text-gray-500 mt-1">{sub}</div>}
      </CardContent>
    </Card>
  );
}

function ByLocationTable({ rows }: { rows: any[] }) {
  return (
    <div className="overflow-auto max-h-80 border rounded-2xl">
      <table className="min-w-full text-sm">
        <thead className="bg-gray-50 sticky top-0">
          <tr>
            <th className="text-left p-3">Ubicación</th>
            <th className="text-right p-3">Activos</th>
            <th className="text-right p-3">Alarmas</th>
            <th className="text-right p-3">Nivel promedio</th>
            <th className="text-right p-3">Flujo promedio</th>
          </tr>
        </thead>
        <tbody>
          {rows.map((r) => (
            <tr key={r.location_id} className="border-t">
              <td className="p-3">
                {r.location_name} <span className="text-gray-400">({r.location_code})</span>
              </td>
              <td className="p-3 text-right">{k(r.assets_total)}</td>
              <td className="p-3 text-right">{k(r.alarms_active)}</td>
              <td className="p-3 text-right">
                {r.avg_level_pct_30d != null ? pct(r.avg_level_pct_30d) : "–"}
              </td>
              <td className="p-3 text-right">
                {r.avg_flow_lpm_30d != null ? `${r.avg_flow_lpm_30d} lpm` : "–"}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

function useLocationFilter(data: any) {
  const [loc, setLoc] = useState<number | "all">("all");
  const filtered = useMemo(() => {
    if (loc === "all") return data;
    const keepLoc = (x: any) => x.location_id === loc;
    return {
      ...data,
      byLocation: data.byLocation.filter(keepLoc),
      assets: {
        ...data.assets,
        tanks: data.assets.tanks.filter(keepLoc),
        pumps: data.assets.pumps.filter(keepLoc),
        valves: data.assets.valves.filter(keepLoc),
        manifolds: data.assets.manifolds.filter(keepLoc),
      },
      latest: {
        tanks: data.latest.tanks.filter((t: any) =>
          data.assets.tanks.find((x: any) => x.id === t.tank_id && keepLoc(x))
        ),
        pumps: data.latest.pumps.filter((p: any) =>
          data.assets.pumps.find((x: any) => x.id === p.pump_id && keepLoc(x))
        ),
      },
      timeseries: {
        tanks: Object.fromEntries(
          Object.entries(data.timeseries.tanks).filter(([id, _]) =>
            data.assets.tanks.find((x: any) => x.id === Number(id) && keepLoc(x))
          )
        ),
        pumps: Object.fromEntries(
          Object.entries(data.timeseries.pumps).filter(([id, _]) =>
            data.assets.pumps.find((x: any) => x.id === Number(id) && keepLoc(x))
          )
        ),
      },
    };
  }, [data, loc]);
  return { loc, setLoc, filtered };
}

function TankLevelChart({ ts }: { ts: any }) {
  const series = ts?.level_percent?.map((v: number, i: number) => ({
    ts: ts.timestamps[i].slice(11, 16),
    nivel: v,
  }));
  return (
    <Card className="rounded-2xl">
      <CardHeader className="pb-2">
        <CardTitle className="text-sm text-gray-500">Nivel del tanque (24h)</CardTitle>
      </CardHeader>
      <CardContent className="h-56">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart data={series} margin={{ top: 5, right: 20, left: 0, bottom: 5 }}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="ts" tick={{ fontSize: 10 }} />
            <YAxis tick={{ fontSize: 10 }} domain={[0, 100]} />
            <Tooltip />
            <Legend />
            <Line type="monotone" dataKey="nivel" dot={false} />
          </LineChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
}

function PumpPowerChart({ ts }: { ts: any }) {
  const series = ts?.power_kw?.map((v: number, i: number) => ({
    ts: ts.timestamps[i].slice(11, 16),
    kw: v,
  }));
  return (
    <Card className="rounded-2xl">
      <CardHeader className="pb-2">
        <CardTitle className="text-sm text-gray-500">kW consumidos (24h)</CardTitle>
      </CardHeader>
      <CardContent className="h-56">
        <ResponsiveContainer width="100%" height="100%">
          <BarChart data={series} margin={{ top: 5, right: 20, left: 0, bottom: 5 }}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="ts" tick={{ fontSize: 10 }} />
            <YAxis tick={{ fontSize: 10 }} />
            <Tooltip />
            <Legend />
            <Bar dataKey="kw" />
          </BarChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
}

function EnergyEfficiency({ data, pumpId }: { data: any; pumpId: number }) {
  const ts = data.timeseries.pumps[String(pumpId)];
  const bands = kwhByBandForPump(ts);
  const offPeak = bands.VALLE;
  const peak = bands.PICO;
  const rest = bands.RESTO;
  const total = bands.total || 1;
  const pctOffValle = (offPeak / total) * 100;
  const pieData = [
    { name: "VALLE", value: offPeak },
    { name: "PICO", value: peak },
    { name: "RESTO", value: rest },
  ];

  const outOfValleHours = ts.timestamps
    .map((t: string, i: number) => ({ t, h: Number(t.slice(11, 13)), kw: ts.power_kw[i] }))
    .filter((row: any) => bandForHour(row.h) !== "VALLE" && row.kw > 0.15);

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
      <Card className="rounded-2xl">
        <CardHeader className="pb-2">
          <CardTitle className="text-sm text-gray-500">Distribución de consumo (kWh, 24h)</CardTitle>
        </CardHeader>
        <CardContent className="h-56">
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              <Pie dataKey="value" data={pieData} nameKey="name" outerRadius={90} label />
            </PieChart>
          </ResponsiveContainer>
          <div className="mt-3 grid grid-cols-3 gap-2 text-center text-sm">
            <div className="p-2 rounded-xl bg-gray-50">
              <div className="text-xs text-gray-500">VALLE</div>
              <div className="font-medium">{offPeak.toFixed(1)} kWh</div>
            </div>
            <div className="p-2 rounded-xl bg-gray-50">
              <div className="text-xs text-gray-500">PICO</div>
              <div className="font-medium">{peak.toFixed(1)} kWh</div>
            </div>
            <div className="p-2 rounded-xl bg-gray-50">
              <div className="text-xs text-gray-500">RESTO</div>
              <div className="font-medium">{rest.toFixed(1)} kWh</div>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card className="rounded-2xl">
        <CardHeader className="pb-2">
          <CardTitle className="text-sm text-gray-500">Eficiencia y horarios</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 gap-3">
            <KPI label="kWh (24h)" value={`${total.toFixed(1)}`} />
            <KPI label="Consumo en VALLE" value={`${pctOffValle.toFixed(0)}%`} sub="% sobre total 24h" />
          </div>
          <div className="mt-4 text-sm font-medium">Horas fuera de VALLE</div>
          <div className="mt-2 border rounded-2xl max-h-40 overflow-auto text-sm">
            {outOfValleHours.length === 0 ? (
              <div className="p-3 text-gray-500">Sin consumo fuera de horario VALLE.</div>
            ) : (
              <table className="min-w-full">
                <thead className="bg-gray-50 sticky top-0">
                  <tr>
                    <th className="text-left p-2">Hora</th>
                    <th className="text-left p-2">Banda</th>
                    <th className="text-right p-2">kW</th>
                  </tr>
                </thead>
                <tbody>
                  {outOfValleHours.map((r: any) => (
                    <tr key={r.t} className="border-t">
                      <td className="p-2">{r.t.slice(11, 16)}h</td>
                      <td className="p-2">{bandForHour(r.h)}</td>
                      <td className="p-2 text-right">{r.kw.toFixed(2)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

function Tabs({
  value,
  onChange,
  tabs,
}: {
  value: string;
  onChange: (v: string) => void;
  tabs: { id: string; label: string }[];
}) {
  return (
    <div>
      <div className="flex gap-2 border-b overflow-x-auto">
        {tabs.map((t) => (
          <button
            key={t.id}
            onClick={() => onChange(t.id)}
            className={`px-3 py-2 text-sm border-b-2 -mb-px ${
              value === t.id ? "border-gray-900 font-medium" : "border-transparent text-gray-500"
            }`}
          >
            {t.label}
          </button>
        ))}
      </div>
    </div>
  );
}

// =============================================================
// ✅ Métricas de confiabilidad / proceso / gestión
// =============================================================
function countStarts(isOn: boolean[]) {
  let starts = 0;
  for (let i = 1; i < isOn.length; i++) if (!isOn[i - 1] && isOn[i]) starts++;
  return starts;
}
function availabilityPct(isOn: boolean[]) {
  const on = isOn.filter(Boolean).length;
  return (on / Math.max(1, isOn.length)) * 100;
}
function avgOnDurationHours(isOn: boolean[]) {
  let total = 0,
    runs = 0,
    current = 0;
  for (let i = 0; i < isOn.length; i++) {
    if (isOn[i]) {
      current++;
    }
    if ((i === isOn.length - 1 || !isOn[i]) && current > 0) {
      total += current;
      runs++;
      current = 0;
    }
  }
  return runs ? total / runs : 0;
}
function mtbaHours(alarms: any[]) {
  if (!alarms || alarms.length < 2) return null;
  const times = alarms.map((a) => new Date(a.ts_raised).getTime()).sort((a, b) => a - b);
  let gaps = 0,
    sum = 0;
  for (let i = 1; i < times.length; i++) {
    sum += times[i] - times[i - 1];
    gaps++;
  }
  return sum / Math.max(1, gaps) / 3600000; // h
}
function tankStats(ts: any) {
  if (!ts) return { min: null, max: null, mean: null, range: null };
  const arr = ts.level_percent || [];
  if (arr.length === 0) return { min: null, max: null, mean: null, range: null };
  const min = Math.min(...arr);
  const max = Math.max(...arr);
  const mean = arr.reduce((a: number, b: number) => a + b, 0) / arr.length;
  const range = max - min;
  return { min, max, mean, range };
}
function tempStats(ts: any) {
  const arr = ts?.temperature_c || [];
  if (!arr.length) return { mean: null, min: null, max: null };
  const min = Math.min(...arr);
  const max = Math.max(...arr);
  const mean = arr.reduce((a: number, b: number) => a + b, 0) / arr.length;
  return { mean, min, max };
}
function turnoverEstimatePerDay(levelRangePct: number) {
  // Estimación grosa: renovación ≈ variación % de nivel en 24h
  return Math.max(0, Number(levelRangePct.toFixed(1)));
}
function criticalResolvedUnder24h(alarms: any[]) {
  const crit = alarms.filter((a) => a.severity === "critical");
  if (!crit.length) return { pct: 100, total: 0 };
  const ok = crit.filter((a) => a.is_active === false).length; // demo
  const pct = (ok / crit.length) * 100;
  return { pct, total: crit.length };
}
function topEnergyByLocation(data: any) {
  const map = new Map<number, number>();
  for (const p of data.assets.pumps) {
    const rec = data.analytics30d.pump_energy_kwh[String(p.id)];
    map.set(p.location_id, (map.get(p.location_id) || 0) + (rec ? rec.kwh_30d : 0));
  }
  const rows = data.locations.map((l: any) => ({
    location_id: l.location_id,
    location_name: l.location_name,
    code: l.location_code,
    kwh_30d: map.get(l.location_id) || 0,
  }));
  return rows.sort((a, b) => b.kwh_30d - a.kwh_30d).slice(0, 3);
}

// =============================================================
// ✅ Dev mini-tests (no cambian la UI)
// =============================================================
function runDevTests() {
  // Test bandas: suma de bandas = total
  const ts = MOCK_DATA.timeseries.pumps["101"]; buildPowerFromIsOn(MOCK_DATA);
  const bands = kwhByBandForPump(ts);
  const approxTotal = ts.power_kw.reduce((a: number, b: number) => a + b, 0);
  console.assert(Math.abs(bands.total - approxTotal) < 1e-6 || Math.abs(bands.total - approxTotal) < 0.5, "[TEST] kwhByBand total ≈ sum(power_kw)");

  // Test confiabilidad: arranques calculados >= 0
  const starts = countStarts(ts.is_on);
  console.assert(starts >= 0, "[TEST] countStarts >= 0");

  // Test stats tanque: rango = max - min
  const tts = MOCK_DATA.timeseries.tanks["1"];
  const stats = tankStats(tts);
  if (stats.min != null && stats.max != null) {
    console.assert(Math.abs(stats.range - (stats.max - stats.min)) < 1e-6, "[TEST] tankStats range consistency");
  }
}

// Ejecutar tests una vez
runDevTests();

// =============================================================
// ✅ Componente principal
// =============================================================
export default function EmbeddedPreview() {
  useConsolePreview(MOCK_DATA);

  const { loc, setLoc, filtered } = useLocationFilter(MOCK_DATA);

  const defaultTankId = filtered.assets.tanks[0]?.id ?? 1;
  const defaultPumpId = filtered.assets.pumps[0]?.id ?? 101;
  const tankTs =
    filtered.timeseries?.tanks?.[String(defaultTankId)] ??
    MOCK_DATA.timeseries.tanks[String(defaultTankId)];
  const pumpTs =
    filtered.timeseries?.pumps?.[String(defaultPumpId)] ??
    MOCK_DATA.timeseries.pumps[String(defaultPumpId)];

  const [tab, setTab] = useState("operacion");

  // Vistas auxiliares
  function ConfiabilidadView() {
    const isOn = pumpTs?.is_on || [];
    const starts = countStarts(isOn);
    const avail = availabilityPct(isOn);
    const avgRun = avgOnDurationHours(isOn);
    const mtba = mtbaHours(MOCK_DATA.alarms);
    return (
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
        <KPI label="Disponibilidad (24h)" value={`${avail.toFixed(0)}%`} />
        <KPI label="Arranques/día" value={starts} />
        <KPI label="Tiempo medio por ciclo" value={`${avgRun.toFixed(1)} h`} />
        <Card className="rounded-2xl lg:col-span-3">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm text-gray-500">MTBA (tiempo medio entre alarmas)</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-semibold">{mtba ? `${mtba.toFixed(1)} h` : "—"}</div>
            <div className="text-sm text-gray-500 mt-1">Calculado sobre histórico demo.</div>
          </CardContent>
        </Card>
      </div>
    );
  }

  function CalidadView() {
    const stats = tankStats(tankTs);
    const temp = tempStats(tankTs);
    const turnover = turnoverEstimatePerDay(stats.range || 0);
    return (
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
        <KPI label="Nivel medio (24h)" value={stats.mean != null ? `${stats.mean.toFixed(0)}%` : "—"} />
        <KPI label="Mín / Máx nivel" value={stats.min != null ? `${stats.min.toFixed(0)}% / ${stats.max.toFixed(0)}%` : "—"} />
        <KPI label="Renovación estimada" value={`${turnover.toFixed(0)}%/día`} />
        <Card className="rounded-2xl lg:col-span-3">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm text-gray-500">Temperatura del agua (24h)</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-3 gap-3">
              <div className="p-3 bg-gray-50 rounded-xl text-center">
                <div className="text-xs text-gray-500">Promedio</div>
                <div className="text-lg font-medium">{temp.mean != null ? `${temp.mean.toFixed(1)}°C` : "—"}</div>
              </div>
              <div className="p-3 bg-gray-50 rounded-xl text-center">
                <div className="text-xs text-gray-500">Mínima</div>
                <div className="text-lg font-medium">{temp.min != null ? `${temp.min.toFixed(1)}°C` : "—"}</div>
              </div>
              <div className="p-3 bg-gray-50 rounded-xl text-center">
                <div className="text-xs text-gray-500">Máxima</div>
                <div className="text-lg font-medium">{temp.max != null ? `${temp.max.toFixed(1)}°C` : "—"}</div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  function GestionView() {
    const { pct, total } = criticalResolvedUnder24h(MOCK_DATA.alarms);
    const top = topEnergyByLocation(MOCK_DATA);
    const offlineAssets = 0; // demo: todos con lecturas
    return (
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
        <KPI label="Críticas resueltas <24h" value={`${pct.toFixed(0)}%`} sub={`${total} críticas`} />
        <KPI label="Activos fuera de servicio" value={offlineAssets} />
        <KPI label="Ubicaciones (Top energía)" value={top.length} />
        <Card className="rounded-2xl lg:col-span-3">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm text-gray-500">Top ubicaciones por consumo (kWh, 30d)</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="overflow-auto max-h-60 border rounded-2xl">
              <table className="min-w-full text-sm">
                <thead className="bg-gray-50 sticky top-0">
                  <tr>
                    <th className="text-left p-3">Ubicación</th>
                    <th className="text-left p-3">Código</th>
                    <th className="text-right p-3">kWh (30d)</th>
                  </tr>
                </thead>
                <tbody>
                  {top.map((r: any) => (
                    <tr key={r.location_id} className="border-t">
                      <td className="p-3">{r.location_name}</td>
                      <td className="p-3">{r.code}</td>
                      <td className="p-3 text-right">{r.kwh_30d.toFixed(1)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      <header className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold">App Embebida — Preview</h1>
        <div className="text-sm text-gray-500">{MOCK_DATA.org.name}</div>
      </header>

      {/* Filtros */}
      <div className="flex gap-2 items-center">
        <span className="text-sm text-gray-500">Ubicación:</span>
        <select
          className="border rounded-xl p-2 text-sm"
          value={loc}
          onChange={(e) => setLoc(e.target.value === "all" ? "all" : Number(e.target.value))}
        >
          <option value="all">Todas</option>
          {MOCK_DATA.locations.map((l) => (
            <option key={l.location_id} value={l.location_id}>
              {l.location_name} ({l.location_code})
            </option>
          ))}
        </select>
        <Button className="ml-2" onClick={() => console.log("[Preview] DATA", filtered)}>
          Loggear DATA
        </Button>
      </div>

      {/* Tabs */}
      <Tabs
        value={tab}
        onChange={setTab}
        tabs={[
          { id: "operacion", label: "Operación" },
          { id: "eficiencia", label: "Eficiencia energética" },
          { id: "confiabilidad", label: "Operación y confiabilidad" },
          { id: "calidad", label: "Proceso y calidad del agua" },
          { id: "gestion", label: "Gestión global" },
        ]}
      />

      {tab === "operacion" && (
        <>
          {/* KPIs */}
          <section className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3">
            <KPI label="Activos" value={k(MOCK_DATA.kpis.assets_total)} />
            <KPI label="Tanques" value={k(MOCK_DATA.kpis.tanks)} />
            <KPI label="Bombas" value={k(MOCK_DATA.kpis.pumps)} />
            <KPI label="Valv." value={k(MOCK_DATA.kpis.valves)} />
            <KPI label="Alarmas activas" value={k(MOCK_DATA.kpis.alarms_active)} />
            <KPI label="Nivel prom. (30d)" value={pct(MOCK_DATA.kpis.avg_level_pct_30d)} />
          </section>

          {/* Gráficos */}
          <section className="grid grid-cols-1 lg:grid-cols-2 gap-4">
            <TankLevelChart ts={tankTs} />
            <PumpPowerChart ts={pumpTs} />
          </section>
        </>
      )}

      {tab === "eficiencia" && (
        <>
          <section className="grid grid-cols-1 lg:grid-cols-2 gap-4">
            <EnergyEfficiency data={filtered} pumpId={defaultPumpId} />
            <Card className="rounded-2xl">
              <CardHeader className="pb-2">
                <CardTitle className="text-sm text-gray-500">Notas</CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="list-disc pl-5 text-sm text-gray-600 space-y-1">
                  <li>
                    Bandas horarias demo: <b>VALLE</b> 00–07h, <b>PICO</b> 19–23h, <b>RESTO</b> 07–19h.
                  </li>
                  <li>El cálculo de kWh usa integración 1h por punto de la serie.</li>
                  <li>Sustituimos <i>caudal</i> por <b>kW</b> en la vista de operación.</li>
                </ul>
              </CardContent>
            </Card>
          </section>
        </>
      )}

      {tab === "confiabilidad" && <ConfiabilidadView />}

      {tab === "calidad" && <CalidadView />}

      {tab === "gestion" && <GestionView />}

      {/* Tabla por ubicación */}
      <section>
        <Card className="rounded-2xl">
          <CardHeader className="pb-2 flex flex-row items-center justify-between">
            <CardTitle className="text-base">Resumen por ubicación</CardTitle>
          </CardHeader>
          <CardContent>
            <ByLocationTable rows={filtered.byLocation} />
          </CardContent>
        </Card>
      </section>

      {/* Listado de alarmas */}
      <section>
        <Card className="rounded-2xl">
          <CardHeader className="pb-2">
            <CardTitle className="text-base">Alarmas</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {MOCK_DATA.alarms.map((a) => (
                <div
                  key={a.id}
                  className={`flex items-center justify-between p-3 rounded-xl border ${
                    a.is_active ? "bg-amber-50 border-amber-200" : "bg-gray-50 border-gray-200"
                  }`}
                >
                  <div className="text-sm">
                    <div className="font-medium">{a.message}</div>
                    <div className="text-gray-500">
                      {a.asset_type.toUpperCase()} #{a.asset_id} • {new Date(a.ts_raised).toLocaleString("es-AR")}
                    </div>
                  </div>
                  <div
                    className={`text-xs px-2 py-1 rounded-full ${
                      a.severity === "critical" ? "bg-red-100 text-red-700" : "bg-amber-100 text-amber-700"
                    }`}
                  >
                    {a.severity}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </section>
    </div>
  );
}
