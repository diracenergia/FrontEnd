// src/components/kpi/KpiContent.tsx
import React from "react";
import mock from "./mock";
import { KpiFiltersProvider, useKpiFilters } from "@/components/filters/FiltersProvider";

// Vistas
import OperacionView from "./views/OperacionView";
import EficienciaView from "./views/EficienciaView";
import ConfiabilidadView from "./views/ConfiabilidadView";
// Si querés, después importá las otras vistas reales:
// import ConfiabilidadView from "./views/ConfiabilidadView";
// import ProcesoCalidadView from "./views/ProcesoCalidadView";
// import GestionGlobalView from "./views/GestionGlobalView";

type TopTab = "operacion" | "eficiencia" | "confiabilidad" | "proceso" | "gestion";

export default function KpiContent() {
  return (
    <KpiFiltersProvider initialLocation={"all"}>
      <KpiContentInner />
    </KpiFiltersProvider>
  );
}

function KpiContentInner() {
  const [tab, setTab] = React.useState<TopTab>("operacion");
  const { locationId, setLocationId, clearSelections } = useKpiFilters();

  const locations = mock.locations ?? [];

  function handleChangeLocation(e: React.ChangeEvent<HTMLSelectElement>) {
    const v = e.target.value;
    const newLoc = v === "all" ? "all" : Number(v);
    setLocationId(newLoc);
    clearSelections();
  }

  return (
    <div className="space-y-3">
      {/* Controles superiores */}
      <div className="flex items-center gap-3">
        <div className="flex items-center gap-2">
          <span className="text-sm text-gray-600">Ubicación:</span>
          <select
            className="border rounded-md px-2 py-1 text-sm"
            value={locationId === "all" ? "all" : String(locationId)}
            onChange={handleChangeLocation}
          >
            <option value="all">Todas</option>
            {locations.map((loc) => (
              <option key={loc.location_id} value={String(loc.location_id)}>
                {loc.location_name} ({loc.location_code})
              </option>
            ))}
          </select>
        </div>

        <button
          type="button"
          className="border rounded-md px-3 py-1 text-sm hover:bg-gray-50"
          onClick={() => console.log("[KPI] payload actual:", mock)}
        >
          Loggear DATA
        </button>
      </div>

      {/* Tabs superiores */}
      <nav className="flex items-center gap-6 text-sm">
        <TopTabLink id="operacion" tab={tab} setTab={setTab}>Operación</TopTabLink>
        <TopTabLink id="eficiencia" tab={tab} setTab={setTab}>Eficiencia energética</TopTabLink>
        <TopTabLink id="confiabilidad" tab={tab} setTab={setTab}>Operación y confiabilidad</TopTabLink>
        <TopTabLink id="proceso" tab={tab} setTab={setTab}>Proceso y calidad del agua</TopTabLink>
        <TopTabLink id="gestion" tab={tab} setTab={setTab}>Gestión global</TopTabLink>
      </nav>

      {/* Contenido por pestaña */}
      {tab === "operacion" && <OperacionView data={mock} />}
      {tab === "eficiencia" && <EficienciaView data={mock} />}

      {tab === "confiabilidad" &&<ConfiabilidadView data={mock} />}
      {tab === "proceso" && (
        <Placeholder>Próximamente: Proceso y calidad del agua (usar useKpiFilters)</Placeholder>
      )}
      {tab === "gestion" && (
        <Placeholder>Próximamente: Gestión global (usar useKpiFilters)</Placeholder>
      )}
    </div>
  );
}

function TopTabLink({
  id, tab, setTab, children,
}: {
  id: TopTab;
  tab: TopTab;
  setTab: (t: TopTab) => void;
  children: React.ReactNode;
}) {
  const active = tab === id;
  return (
    <button
      type="button"
      className={`border-b-2 pb-1 ${
        active ? "border-black text-black" : "border-transparent text-gray-500 hover:text-gray-800"
      }`}
      onClick={() => setTab(id)}
    >
      {children}
    </button>
  );
}

function Placeholder({ children }: { children: React.ReactNode }) {
  return (
    <div className="rounded-xl border p-6 text-sm text-gray-600 bg-white">
      {children}
    </div>
  );
}
