// src/components/kpi/views/ConfiabilidadView.tsx
import React, { useMemo } from "react";
import type { KpiPayload, PumpTS } from "../types";
import KPI from "../shared/KPI";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { countStarts, availabilityPct, avgOnDurationHours } from "../utils";
import { useKpiFilters } from "@/components/filters/FiltersProvider";

type Props = { data: KpiPayload };
type TimeWindow = "24h" | "7d" | "30d";

const k = (n: number) => new Intl.NumberFormat("es-AR").format(n);
const pct1 = (n: number) => `${n.toFixed(1)}%`;

function sliceByWindow<T extends { timestamps: string[] }>(
  ts: T | undefined,
  win: TimeWindow
): T | undefined {
  if (!ts || !ts.timestamps?.length) return ts;
  const end = new Date(ts.timestamps[ts.timestamps.length - 1]!);
  const start = new Date(end);
  if (win === "24h") start.setHours(start.getHours() - 24);
  if (win === "7d") start.setDate(start.getDate() - 7);
  if (win === "30d") start.setDate(start.getDate() - 30);
  const startMs = start.getTime();
  const idxs = ts.timestamps
    .map((t, i) => ({ i, ms: new Date(t).getTime() }))
    .filter(({ ms }) => ms >= startMs)
    .map(({ i }) => i);
  if (!idxs.length) return ts;
  const pick = <U,>(arr?: U[]) => (arr ? idxs.map((i) => arr[i]) : undefined);
  // @ts-ignore reconstruimos con keys conocidas
  return {
    ...ts,
    timestamps: idxs.map((i) => ts.timestamps[i]),
    is_on: pick((ts as any).is_on),
    power_kw: pick((ts as any).power_kw),
  };
}

function mtbaHours(alarms: Array<{ ts_raised: string }> = []) {
  if (alarms.length < 2) return null;
  const times = alarms
    .map((a) => new Date(a.ts_raised).getTime())
    .filter((n) => Number.isFinite(n))
    .sort((a, b) => a - b);
  if (times.length < 2) return null;
  let sum = 0;
  for (let i = 1; i < times.length; i++) sum += times[i] - times[i - 1];
  return sum / (times.length - 1) / 3_600_000; // ms → horas
}

export default function ConfiabilidadView({ data }: Props) {
  const { locationId, window: win, setWindow, pumpId, selectPump } = useKpiFilters();

  // Ámbito por ubicación
  const pumpsInScope = useMemo(
    () =>
      data.assets.pumps.filter((p) =>
        locationId === "all" ? true : p.location_id === locationId
      ),
    [data, locationId]
  );

  // Bomba seleccionada o primera con series en el ámbito
  const selectedPumpId = useMemo(() => {
    const inScope = pumpId && pumpsInScope.some((p) => p.id === pumpId);
    if (inScope) return pumpId!;
    const firstWithTs = pumpsInScope.find(
      (p) => (data.timeseries.pumps as any)?.[String(p.id)]
    );
    return firstWithTs?.id ?? null;
  }, [pumpId, pumpsInScope, data]);

  const rawTs: PumpTS | undefined = selectedPumpId
    ? (data.timeseries.pumps as any)?.[String(selectedPumpId)]
    : undefined;

  const ts = useMemo(() => sliceByWindow(rawTs, win), [rawTs, win]);
  const isOn: boolean[] = (ts?.is_on ?? []) as boolean[];

  // KPIs para la ventana actual
  const starts = useMemo(() => countStarts(isOn), [isOn]);
  const avail = useMemo(() => availabilityPct(isOn), [isOn]);
  const avgRun = useMemo(() => avgOnDurationHours(isOn), [isOn]);

  // MTBA sobre alarmas del período seleccionado
  const alarmsForWindow = useMemo(() => {
    const all = (data.alarms ?? []).map((a: any) => ({
      ts_raised: a.ts ?? a.ts_raised ?? "",
    }));
    const end = ts?.timestamps?.[ts.timestamps.length - 1]
      ? new Date(ts.timestamps[ts.timestamps.length - 1]).getTime()
      : Date.now();
    const start =
      win === "24h"
        ? end - 24 * 3600000
        : win === "7d"
        ? end - 7 * 24 * 3600000
        : end - 30 * 24 * 3600000;
    return all.filter((a) => {
      const t = new Date(a.ts_raised).getTime();
      return Number.isFinite(t) && t >= start && t <= end;
    });
  }, [data, ts, win]);

  const mtba = useMemo(() => mtbaHours(alarmsForWindow), [alarmsForWindow]);
  const titleByWin =
    win === "24h" ? "24h" : win === "7d" ? "últimos 7 días" : "últimos 30 días";

  // Tabla inferior: métricas por bomba del ámbito (en la ventana)
  const rows = useMemo(() => {
    return pumpsInScope.map((p: any) => {
      const base = (data.timeseries.pumps as any)?.[String(p.id)];
      const sliced = sliceByWindow(base, win);
      const onArr: boolean[] = (sliced?.is_on ?? []) as boolean[];
      return {
        id: p.id,
        name: p.name ?? `Bomba ${p.id}`,
        starts: countStarts(onArr),
        avail: availabilityPct(onArr),
        avgRun: avgOnDurationHours(onArr),
      };
    });
  }, [pumpsInScope, data, win]);

  return (
    <div className="space-y-6">
      {/* Header de KPIs (igual que Operación/Eficiencia) */}
      <section className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3">
        <KPI label="Activos" value={k(data.kpis.assets_total)} />
        <KPI label="Tanques" value={k(data.kpis.tanks)} />
        <KPI label="Bombas" value={k(data.kpis.pumps)} />
        <KPI label="Valv." value={k(data.kpis.valves)} />
        <KPI label="Alarmas activas" value={k(data.kpis.alarms_active)} />
        <KPI label="Nivel prom. (30d)" value={pct1(data.kpis.avg_level_pct_30d)} />
      </section>

      {/* Controles de ventana */}
      <div className="flex items-center gap-8">
        <div className="text-sm text-gray-500">Ventana:</div>
        <div className="flex gap-6">
          <Button variant={win === "24h" ? "default" : "outline"} onClick={() => setWindow("24h")}>
            24 hs
          </Button>
          <Button variant={win === "7d" ? "default" : "outline"} onClick={() => setWindow("7d")}>
            1 semana
          </Button>
          <Button variant={win === "30d" ? "default" : "outline"} onClick={() => setWindow("30d")}>
            30 días
          </Button>
        </div>
      </div>

      {/* KPIs de confiabilidad */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
        <KPI label={`Disponibilidad (${titleByWin})`} value={`${avail.toFixed(0)}%`} />
        <KPI label="Arranques" value={starts} sub={`en ${titleByWin}`} />
        <KPI label="Tiempo medio por ciclo" value={`${avgRun.toFixed(1)} h`} />
      </div>

      {/* MTBA */}
      <Card className="rounded-2xl">
        <CardHeader className="pb-2">
          <CardTitle className="text-sm text-gray-500">
            MTBA (tiempo medio entre alarmas)
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-3xl font-semibold">
            {typeof mtba === "number" ? `${mtba.toFixed(1)} h` : "—"}
          </div>
          <div className="text-sm text-gray-500 mt-1">
            Calculado sobre alarmas del período seleccionado.
          </div>
        </CardContent>
      </Card>

      {/* Tabla inferior: bombas del ámbito (clic = seleccionar) */}
      <Card className="rounded-2xl">
        <CardHeader className="pb-2">
          <CardTitle className="text-sm text-gray-500">
            Bombas en ámbito · {pumpsInScope.length}
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <table className="min-w-full text-sm">
              <thead>
                <tr>
                  <th className="text-left p-2">Bomba</th>
                  <th className="text-right p-2">Disponibilidad</th>
                  <th className="text-right p-2">Arranques</th>
                  <th className="text-right p-2">Tiempo medio ciclo</th>
                </tr>
              </thead>
              <tbody>
                {rows.map((r) => (
                  <tr
                    key={r.id}
                    className={`border-t cursor-pointer ${selectedPumpId === r.id ? "bg-gray-50" : ""}`}
                    onClick={() => selectPump(selectedPumpId === r.id ? null : r.id)}
                  >
                    <td className="p-2">{r.name}</td>
                    <td className="p-2 text-right">{r.avail.toFixed(0)}%</td>
                    <td className="p-2 text-right">{r.starts}</td>
                    <td className="p-2 text-right">{r.avgRun.toFixed(1)} h</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
