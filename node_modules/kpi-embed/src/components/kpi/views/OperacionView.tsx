// src/components/kpi/views/OperacionView.tsx
import React, { useMemo } from "react";
import type { KpiPayload, TankTS, PumpTS } from "../types";
import KPI from "../shared/KPI";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import Tabs from "../parts/Tabs";
import TankLevelChart from "../shared/TankLevelChart";
import PumpUsageChart from "../shared/PumpPowerChart";
import { useKpiFilters } from "@/components/filters/FiltersProvider";

type Props = {
  data: KpiPayload;   // payload (puede ser global; filtramos por store)
};

type TimeWindow = "24h" | "7d" | "30d";

const k = (n: number) => new Intl.NumberFormat("es-AR").format(n);
const pct1 = (n: number) => `${n.toFixed(1)}%`;

// Recorta una serie a una ventana (24h/7d/30d)
function sliceByWindow<T extends { timestamps: string[] }>(
  ts: T | undefined,
  win: TimeWindow
): T | undefined {
  if (!ts || !ts.timestamps?.length) return ts;
  const end = new Date(ts.timestamps[ts.timestamps.length - 1]!);
  const start = new Date(end);
  if (win === "24h") start.setHours(start.getHours() - 24);
  if (win === "7d") start.setDate(start.getDate() - 7);
  if (win === "30d") start.setDate(start.getDate() - 30);
  const startMs = start.getTime();
  const idxs = ts.timestamps
    .map((t, i) => ({ i, ms: new Date(t).getTime() }))
    .filter(({ ms }) => ms >= startMs)
    .map(({ i }) => i);
  if (!idxs.length) return ts;
  const pick = <U,>(arr?: U[]) => (arr ? idxs.map((i) => arr[i]) : undefined);
  // @ts-ignore - reconstruimos con las keys conocidas
  return {
    ...ts,
    timestamps: idxs.map((i) => ts.timestamps[i]),
    level_percent: pick((ts as any).level_percent),
    volume_l: pick((ts as any).volume_l),
    temperature_c: pick((ts as any).temperature_c),
    is_on: pick((ts as any).is_on),
    power_kw: pick((ts as any).power_kw),
  };
}

// Horas de uso (para tabla)
function computePumpHours(p: PumpTS | undefined, win: TimeWindow): number {
  if (!p || !p.timestamps?.length) return 0;
  const s = sliceByWindow(p, win)!;
  let hours = 0;
  for (let i = 1; i < s.timestamps.length; i++) {
    const t0 = new Date(s.timestamps[i - 1]).getTime();
    const t1 = new Date(s.timestamps[i]).getTime();
    const dt = (t1 - t0) / 3600000;
    const on =
      (s.is_on && s.is_on[i - 1] === true) ||
      ((s.power_kw && (s.power_kw[i - 1] ?? 0) > 0) ? true : false);
    if (on) hours += dt;
  }
  return hours;
}

function avg(arr: number[] | undefined): number {
  if (!arr || !arr.length) return 0;
  return arr.reduce((a, b) => a + b, 0) / arr.length;
}
function computeTankAvgLevel(t: TankTS | undefined, win: TimeWindow): number {
  if (!t) return 0;
  const s = sliceByWindow(t, win)!;
  return avg(s.level_percent);
}

export default function OperacionView({ data }: Props) {
  const {
    window: win,
    setWindow,
    locationId,
    pumpId,
    selectPump,
    tankId,
    selectTank,
  } = useKpiFilters();

  const [tab, setTab] = React.useState<"bombas" | "tanques">("bombas");

  // Ámbito por ubicación
  const inScopePump = (p: any) =>
    locationId === "all" ? true : p.location_id === locationId;
  const inScopeTank = (t: any) =>
    locationId === "all" ? true : t.location_id === locationId;

  const pumpsInScope = useMemo(
    () => data.assets.pumps.filter(inScopePump),
    [data, locationId]
  );
  const tanksInScope = useMemo(
    () => data.assets.tanks.filter(inScopeTank),
    [data, locationId]
  );

  // ---------- SERIES SELECCIONADAS PARA GRÁFICOS ----------
  // BOMBAS: si hay bomba seleccionada => su serie; si no => flota
  const selectedPumpTs = useMemo(() => {
    if (!pumpId) return undefined;
    const ts = (data.timeseries.pumps as any)?.[String(pumpId)];
    return sliceByWindow(ts, win);
  }, [pumpId, data, win]);

  const fleetTs = useMemo(() => {
    const out: Record<string, PumpTS> = {};
    pumpsInScope.forEach((p: any) => {
      const ts = (data.timeseries.pumps as any)?.[String(p.id)];
      if (ts) out[p.id] = sliceByWindow(ts, win)!;
    });
    return out;
  }, [data, pumpsInScope, win]);

  // TANQUES: si hay tanque seleccionado => su serie; si no => primero con datos en el ámbito
  const selectedTankTs = useMemo(() => {
    const tanksTs = data.timeseries.tanks as any;
    if (tankId) {
      const ts = tanksTs?.[String(tankId)];
      return sliceByWindow(ts, win);
    }
    // fallback: primer tanque con series en el ámbito
    for (const t of tanksInScope) {
      const ts = tanksTs?.[String(t.id)];
      if (ts?.timestamps?.length) {
        return sliceByWindow(ts, win);
      }
    }
    return undefined;
  }, [tankId, data, tanksInScope, win]);

  // ---------- MÉTRICAS TABLAS ----------
  const rowsBombas = useMemo(() => {
    return pumpsInScope.map((p: any) => {
      const ts = (data.timeseries.pumps as any)?.[String(p.id)];
      return {
        id: p.id,
        name: p.name ?? `Bomba ${p.id}`,
        h24: computePumpHours(ts, "24h"),
        h7d: computePumpHours(ts, "7d"),
        h30: computePumpHours(ts, "30d"),
      };
    });
  }, [pumpsInScope, data]);

  const rowsTanques = useMemo(() => {
    return tanksInScope.map((t: any) => {
      const ts = (data.timeseries.tanks as any)?.[String(t.id)];
      return {
        id: t.id,
        name: t.name ?? `Tanque ${t.id}`,
        a24: computeTankAvgLevel(ts, "24h"),
        a7d: computeTankAvgLevel(ts, "7d"),
        a30: computeTankAvgLevel(ts, "30d"),
      };
    });
  }, [tanksInScope, data]);

  const pumpCount = pumpsInScope.length;
  const tankCount = tanksInScope.length;

  return (
    <>
      {/* KPIs del payload */}
      <section className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3">
        <KPI label="Activos" value={k(data.kpis.assets_total)} />
        <KPI label="Tanques" value={k(data.kpis.tanks)} />
        <KPI label="Bombas" value={k(data.kpis.pumps)} />
        <KPI label="Valv." value={k(data.kpis.valves)} />
        <KPI label="Alarmas activas" value={k(data.kpis.alarms_active)} />
        <KPI label="Nivel prom. (30d)" value={pct1(data.kpis.avg_level_pct_30d)} />
      </section>

      {/* Ventana temporal */}
      <div className="flex items-center gap-8 my-2">
        <div className="text-sm text-gray-500">Ventana:</div>
        <div className="flex gap-6">
          <Button variant={win === "24h" ? "default" : "outline"} onClick={() => setWindow("24h")}>
            24 hs
          </Button>
          <Button variant={win === "7d" ? "default" : "outline"} onClick={() => setWindow("7d")}>
            1 semana
          </Button>
          <Button variant={win === "30d" ? "default" : "outline"} onClick={() => setWindow("30d")}>
            30 días
          </Button>
        </div>
      </div>

      {/* Gráficos */}
      <section className="grid grid-cols-1 lg:grid-cols-2 gap-4">
        {selectedTankTs ? (
          <TankLevelChart ts={selectedTankTs} />
        ) : (
          <Card><CardContent>Sin datos de tanque</CardContent></Card>
        )}

        {selectedPumpTs ? (
          <PumpUsageChart ts={selectedPumpTs} windowSel={win} title="Uso de bombas" totalAvailable={1} />
        ) : Object.keys(fleetTs).length ? (
          <PumpUsageChart fleet={fleetTs} windowSel={win} title="Uso de bombas" totalAvailable={pumpCount} />
        ) : (
          <Card><CardContent>Sin datos de bomba</CardContent></Card>
        )}
      </section>

      {/* Tabs + tabla inferior */}
      <Card className="rounded-2xl" style={{ marginTop: 12 }}>
        <CardHeader className="pb-2">
          <div className="flex items-center justify-between">
            <CardTitle className="text-sm text-gray-500">
              Detalle · {tab === "bombas" ? `Bombas: ${pumpCount}` : `Tanques: ${tankCount}`}
            </CardTitle>
            <Tabs
              value={tab}
              onChange={(v) => setTab(v as any)}
              tabs={[
                { id: "bombas", label: "Bombas" },
                { id: "tanques", label: "Tanques" },
              ]}
            />
          </div>
        </CardHeader>
        <CardContent>
          {tab === "bombas" ? (
            <div className="overflow-x-auto">
              <table className="min-w-full text-sm">
                <thead>
                  <tr>
                    <th className="text-left p-2">Bomba</th>
                    <th className={"text-left p-2 " + (win === "24h" ? "font-semibold" : "")}>24 hs</th>
                    <th className={"text-left p-2 " + (win === "7d" ? "font-semibold" : "")}>1 semana</th>
                    <th className={"text-left p-2 " + (win === "30d" ? "font-semibold" : "")}>30 días</th>
                  </tr>
                </thead>
                <tbody>
                  {rowsBombas.map((r) => (
                    <tr
                      key={r.id}
                      className={`border-t cursor-pointer ${pumpId === r.id ? "bg-gray-50" : ""}`}
                      onClick={() => selectPump(pumpId === r.id ? null : r.id)}
                    >
                      <td className="p-2">{r.name}</td>
                      <td className="p-2">{r.h24.toFixed(1)} h</td>
                      <td className="p-2">{r.h7d.toFixed(1)} h</td>
                      <td className="p-2">{r.h30.toFixed(1)} h</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full text-sm">
                <thead>
                  <tr>
                    <th className="text-left p-2">Tanque</th>
                    <th className={"text-left p-2 " + (win === "24h" ? "font-semibold" : "")}>24 hs</th>
                    <th className={"text-left p-2 " + (win === "7d" ? "font-semibold" : "")}>1 semana</th>
                    <th className={"text-left p-2 " + (win === "30d" ? "font-semibold" : "")}>30 días</th>
                  </tr>
                </thead>
                <tbody>
                  {rowsTanques.map((r) => (
                    <tr
                      key={r.id}
                      className={`border-t cursor-pointer ${tankId === r.id ? "bg-gray-50" : ""}`}
                      onClick={() => selectTank(tankId === r.id ? null : r.id)}
                    >
                      <td className="p-2">{r.name}</td>
                      <td className="p-2">{pct1(r.a24)}</td>
                      <td className="p-2">{pct1(r.a7d)}</td>
                      <td className="p-2">{pct1(r.a30)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </CardContent>
      </Card>
    </>
  );
}
