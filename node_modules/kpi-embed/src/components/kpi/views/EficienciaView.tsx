// src/components/kpi/views/EficienciaView.tsx
import React, { useMemo } from "react";
import type { KpiPayload, PumpTS } from "../types";
import KPI from "../shared/KPI";
import { bandForHour } from "../utils";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  ResponsiveContainer,
  PieChart,
  Pie,
  Tooltip,
  Legend,
  Cell,
} from "recharts";
import { useKpiFilters } from "@/components/filters/FiltersProvider";

type Props = { data: KpiPayload };
type TimeWindow = "24h" | "7d" | "30d";

const k = (n: number) => new Intl.NumberFormat("es-AR").format(n);
const pct1 = (n: number) => `${n.toFixed(1)}%`;

// Recorta serie a la ventana seleccionada
function sliceByWindow<T extends { timestamps: string[] }>(
  ts: T | undefined,
  win: TimeWindow
): T | undefined {
  if (!ts || !ts.timestamps?.length) return ts;
  const end = new Date(ts.timestamps[ts.timestamps.length - 1]!);
  const start = new Date(end);
  if (win === "24h") start.setHours(start.getHours() - 24);
  if (win === "7d") start.setDate(start.getDate() - 7);
  if (win === "30d") start.setDate(start.getDate() - 30);
  const startMs = start.getTime();
  const idxs = ts.timestamps
    .map((t, i) => ({ i, ms: new Date(t).getTime() }))
    .filter(({ ms }) => ms >= startMs)
    .map(({ i }) => i);
  if (!idxs.length) return ts;
  const pick = <U,>(arr?: U[]) => (arr ? idxs.map((i) => arr[i]) : undefined);
  // @ts-ignore reconstruimos con keys conocidas
  return {
    ...ts,
    timestamps: idxs.map((i) => ts.timestamps[i]),
    is_on: pick((ts as any).is_on),
    power_kw: pick((ts as any).power_kw),
  };
}

// Horas por banda (EPEN) para una bomba en la ventana
function hoursByBandForPump(ts: PumpTS | undefined, onKwThreshold = 0.15) {
  let VALLE = 0, PICO = 0, RESTO = 0, total = 0;
  const n = ts?.timestamps?.length ?? 0;
  if (!ts || n <= 1) return { VALLE, PICO, RESTO, total };

  for (let i = 1; i < n; i++) {
    const t0 = new Date(ts.timestamps[i - 1]).getTime();
    const t1 = new Date(ts.timestamps[i]).getTime();
    const dtH = (t1 - t0) / 3_600_000; // horas
    const on =
      (ts.is_on && ts.is_on[i - 1] === true) ||
      ((ts as any).power_kw && (((ts as any).power_kw[i - 1] ?? 0) > onKwThreshold));
    if (!on || dtH <= 0) continue;

    const h = new Date(ts.timestamps[i - 1]).getHours();
    const band = bandForHour(h); // "VALLE" | "PICO" | "RESTO"
    if (band === "VALLE") VALLE += dtH;
    else if (band === "PICO") PICO += dtH;
    else RESTO += dtH;
    total += dtH;
  }
  return { VALLE, PICO, RESTO, total };
}

export default function EficienciaView({ data }: Props) {
  const { locationId, window: win, setWindow, pumpId, selectPump } = useKpiFilters();

  // Bombas dentro del ámbito (Ubicación)
  const pumpsInScope = useMemo(
    () =>
      data.assets.pumps.filter((p) =>
        locationId === "all" ? true : p.location_id === locationId
      ),
    [data, locationId]
  );

  // Bomba a graficar: seleccionada o primera con series
  const selectedPumpId = useMemo(() => {
    const inScope = pumpId && pumpsInScope.some((p) => p.id === pumpId);
    if (inScope) return pumpId!;
    const firstWithTs = pumpsInScope.find(
      (p) => (data.timeseries.pumps as any)?.[String(p.id)]
    );
    return firstWithTs?.id ?? null;
  }, [pumpId, pumpsInScope, data]);

  const rawTs: PumpTS | undefined = selectedPumpId
    ? (data.timeseries.pumps as any)?.[String(selectedPumpId)]
    : undefined;

  const ts = useMemo(() => sliceByWindow(rawTs, win), [rawTs, win]);

  // Horas por banda en la ventana + porcentajes
  const bandsH = useMemo(() => hoursByBandForPump(ts), [ts]);
  const totalH = bandsH.total;
  const pct = (v: number) => (totalH > 0 ? (v / totalH) * 100 : 0);
  const pctValle = pct(bandsH.VALLE);
  const pctPico = pct(bandsH.PICO);
  const pctResto = pct(bandsH.RESTO);

  const titleByWin =
    win === "24h" ? "24h" : win === "7d" ? "últimos 7 días" : "últimos 30 días";

  // Tabla inferior: bombas del ámbito (selección)
  const rowsBombas = useMemo(() => {
    return pumpsInScope.map((p: any) => {
      const base = (data.timeseries.pumps as any)?.[String(p.id)];
      const sliced = sliceByWindow(base, win);
      const b = hoursByBandForPump(sliced);
      const vallePct = b.total > 0 ? (b.VALLE / b.total) * 100 : 0;
      return {
        id: p.id,
        name: p.name ?? `Bomba ${p.id}`,
        horas: b.total,
        vallePct,
      };
    });
  }, [pumpsInScope, data, win]);

  // Sin datos UX
  if (!ts?.timestamps?.length) {
    return (
      <Card className="rounded-2xl">
        <CardHeader className="pb-2">
          <CardTitle className="text-sm text-gray-500">Eficiencia energética</CardTitle>
        </CardHeader>
        <CardContent className="text-sm text-gray-600">
          No hay datos para esta ubicación/ventana. Elegí otra bomba en <b>Operación</b> o cambiá la ventana.
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-4">
      {/* KPIs superiores (igual que Operación) */}
      <section className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3">
        <KPI label="Activos" value={k(data.kpis.assets_total)} />
        <KPI label="Tanques" value={k(data.kpis.tanks)} />
        <KPI label="Bombas" value={k(data.kpis.pumps)} />
        <KPI label="Valv." value={k(data.kpis.valves)} />
        <KPI label="Alarmas activas" value={k(data.kpis.alarms_active)} />
        <KPI label="Nivel prom. (30d)" value={pct1(data.kpis.avg_level_pct_30d)} />
      </section>

      {/* Controles de ventana */}
      <div className="flex items-center gap-8">
        <div className="text-sm text-gray-500">Ventana:</div>
        <div className="flex gap-6">
          <Button variant={win === "24h" ? "default" : "outline"} onClick={() => setWindow("24h")}>
            24 hs
          </Button>
          <Button variant={win === "7d" ? "default" : "outline"} onClick={() => setWindow("7d")}>
            1 semana
          </Button>
          <Button variant={win === "30d" ? "default" : "outline"} onClick={() => setWindow("30d")}>
            30 días
          </Button>
        </div>
      </div>

      {/* Grillas principales */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
        {/* PIE: distribución de uso (HORAS) */}
       <Card className="rounded-2xl">
  <CardHeader className="pb-2">
    <CardTitle className="text-sm text-gray-500">
      Distribución de uso (horas, {titleByWin})
    </CardTitle>
  </CardHeader>

  <CardContent>
    {/* Alto fijo SOLO para el gráfico */}
    <div className="h-72 pt-4">
      <ResponsiveContainer width="100%" height="100%">
        <PieChart margin={{ top: 0, right: 8, bottom: 0, left: 8 }}>
          <Pie
            dataKey="value"
            data={[
              { name: "VALLE", value: Number(bandsH.VALLE || 0) },
              { name: "PICO",  value: Number(bandsH.PICO  || 0) },
              { name: "RESTO", value: Number(bandsH.RESTO || 0) },
            ]}
            nameKey="name"
            cx="50%" cy="55%" outerRadius="70%"
            label={false} labelLine={false}
          >
            <Cell fill="#60a5fa" /> {/* VALLE */}
            <Cell fill="#ef4444" /> {/* PICO  */}
            <Cell fill="#a3a3a3" /> {/* RESTO */}
          </Pie>
          <Tooltip formatter={(v: any, n: any) => [`${Number(v).toFixed(1)} h`, n]} />
          <Legend verticalAlign="bottom" align="center" />
        </PieChart>
      </ResponsiveContainer>
    </div>

    {/* Tarjetas en % con más separación y responsivas */}
    <div className="mt-4 grid grid-cols-1 sm:grid-cols-3 gap-2 text-center text-sm">
      <div className="p-2 rounded-xl bg-gray-50">
        <div className="text-xs text-gray-500">VALLE</div>
        <div className="font-medium">{pctValle.toFixed(0)}%</div>
      </div>
      <div className="p-2 rounded-xl bg-gray-50">
        <div className="text-xs text-gray-500">PICO</div>
        <div className="font-medium">{pctPico.toFixed(0)}%</div>
      </div>
      <div className="p-2 rounded-xl bg-gray-50">
        <div className="text-xs text-gray-500">RESTO</div>
        <div className="font-medium">{pctResto.toFixed(0)}%</div>
      </div>
    </div>
  </CardContent>
</Card>


        {/* KPIs: total + % por banda */}
        <Card className="rounded-2xl">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm text-gray-500">Uso por bandas</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
              <KPI label={`Horas (${titleByWin})`} value={`${totalH.toFixed(1)} h`} />
              <KPI label="VALLE" value={`${pctValle.toFixed(0)}%`} sub="% sobre total" />
              <KPI label="PICO" value={`${pctPico.toFixed(0)}%`} sub="% sobre total" />
              <KPI label="RESTO" value={`${pctResto.toFixed(0)}%`} sub="% sobre total" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Tabla inferior: bombas del ámbito (selección que afecta la vista) */}
      <Card className="rounded-2xl">
        <CardHeader className="pb-2">
          <CardTitle className="text-sm text-gray-500">
            Bombas en ámbito · {pumpsInScope.length}
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <table className="min-w-full text-sm">
              <thead>
                <tr>
                  <th className="text-left p-2">Bomba</th>
                  <th className="text-right p-2">Horas ({titleByWin})</th>
                  <th className="text-right p-2">% en VALLE</th>
                </tr>
              </thead>
              <tbody>
                {rowsBombas.map((r) => (
                  <tr
                    key={r.id}
                    className={`border-t cursor-pointer ${selectedPumpId === r.id ? "bg-gray-50" : ""}`}
                    onClick={() => selectPump(selectedPumpId === r.id ? null : r.id)}
                  >
                    <td className="p-2">{r.name}</td>
                    <td className="p-2 text-right">{r.horas.toFixed(1)} h</td>
                    <td className="p-2 text-right">{r.vallePct.toFixed(0)}%</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
