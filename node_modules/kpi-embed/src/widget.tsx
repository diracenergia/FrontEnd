// src/widget.tsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import KpiContent from '@/components/kpi/KpiContent'
import './index.css'

/** ===== Tipos ===== */
export type KpiDatum   = { label: string; value: number; delta?: number }
export type SeriesDatum = { name: string; data: number[] }

export type KpiWidgetProps = {
  /** T√≠tulo opcional (se muestra solo si chrome !== 'none') */
  title?: string
  /** Datos opcionales para el contenido */
  data?: {
    kpis?: KpiDatum[]
    series?: SeriesDatum[]
    categories?: string[]
    [key: string]: any
  }
  /** Layout m√°s compacto */
  compact?: boolean
  /**
   * Chrome del widget:
   *  - 'panel' (default): contenedor + t√≠tulo interno
   *  - 'none'           : solo el contenido (ideal embebidos en un card del host)
   */
  chrome?: 'panel' | 'none'
  /**
   * Color de fondo del lienzo del widget.
   *  - 'auto' (default): copia el background del document.body del host
   *  - cualquier CSS color: ej '#f6f7f9', 'rgb(246,247,249)', 'transparent'
   */
  pageBg?: string | 'auto'
}

/** ===== Versi√≥n del widget (√∫til para diagn√≥stico) ===== */
export const KPI_WIDGET_VERSION = '0.1.7'

/** ===== helpers ===== */
function getHostBg(fallback = '#f6f7f9') {
  try {
    const c = getComputedStyle(document.body).backgroundColor
    return c && c !== 'rgba(0, 0, 0, 0)' ? c : fallback
  } catch { return fallback }
}

/** ===== 1) React component embebible ===== */
export function KpiWidget(props: KpiWidgetProps) {
  const { title, chrome = 'panel', pageBg = 'auto', ...rest } = props

  const body = <KpiContent {...(rest as any)} />

  // Fondo del lienzo del widget (para que no contraste con el host)
  const resolvedBg = pageBg === 'auto' ? getHostBg() : pageBg
  const rootStyle: React.CSSProperties = {
    fontFamily: 'ui-sans-serif, system-ui',
    width: '100%',
    height: '100%',
    background: resolvedBg, // üëà toma el mismo color que el host
  }

  if (chrome === 'none') {
    return <div className="kpi-root" style={rootStyle}>{body}</div>
  }

  return (
    <div className="kpi-root" style={rootStyle}>
      {title && <h2 style={{ margin: 0, marginBottom: 12 }}>{title}</h2>}
      {body}
    </div>
  )
}

/** ===== 2) Helper para montar en apps host (microfrontend) ===== */
export function mountKpiWidget(el: HTMLElement, props: KpiWidgetProps = {}) {
  const root = ReactDOM.createRoot(el)
  root.render(<KpiWidget {...props} />)
  return () => root.unmount()
}

/** ===== 3) Web Component para hosts no-React ===== */
class KpiWidgetElement extends HTMLElement {
  static version = KPI_WIDGET_VERSION
  private root?: ReturnType<typeof ReactDOM.createRoot>
  static get observedAttributes() { return ['title', 'compact', 'data', 'chrome', 'page-bg'] }

  connectedCallback() {
    this.root = ReactDOM.createRoot(this)
    this.render()
  }

  attributeChangedCallback() {
    this.render()
  }

  disconnectedCallback() {
    this.root?.unmount()
  }

  private render() {
    const title = this.getAttribute('title') || undefined
    const compact = this.getAttribute('compact') === 'true'
    const chromeAttr = (this.getAttribute('chrome') || 'panel').toLowerCase()
    const chrome: KpiWidgetProps['chrome'] = chromeAttr === 'none' ? 'none' : 'panel'

    // page-bg (para WC): 'auto' | '#f6f7f9' | 'transparent' | etc.
    const pageBgAttr = (this.getAttribute('page-bg') || 'auto') as KpiWidgetProps['pageBg']

    let data: KpiWidgetProps['data'] | undefined
    const dataAttr = this.getAttribute('data')
    if (dataAttr) {
      try { data = JSON.parse(dataAttr) } catch { data = undefined }
    }

    this.root?.render(
      <KpiWidget title={title} compact={compact} data={data} chrome={chrome} pageBg={pageBgAttr} />
    )
  }
}

/** Export√° el registrador; NO auto-registramos para evitar ‚Äúcongelar‚Äù una versi√≥n */
export function defineKpiWidgetElement(tagName = 'kpi-widget') {
  if (typeof window !== 'undefined') {
    const defined = customElements.get(tagName)
    if (!defined) {
      customElements.define(tagName, KpiWidgetElement)
    }
  }
}

/** ===== Default export √∫til para consumidores ===== */
const api = {
  version: KPI_WIDGET_VERSION,
  KpiWidget,
  mount: mountKpiWidget,
  defineElement: defineKpiWidgetElement,
}
export default api
