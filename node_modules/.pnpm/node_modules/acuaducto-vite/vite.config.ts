// infraestructura/vite.config.ts
import { defineConfig, loadEnv } from 'vite'
import react from '@vitejs/plugin-react'
import { fileURLToPath, URL } from 'node:url'

export default defineConfig(({ mode }) => {
  const env = loadEnv(mode, process.cwd(), '')
  const isProd = mode === 'production'

  // DEV host/puertos
  const DEV_HOST = env.VITE_HOST || '127.0.0.1'
  const DEV_PORT = Number(env.VITE_PORT || 5181)
  const PREV_PORT = Number(env.VITE_PREVIEW_PORT || DEV_PORT)

  // En prod esta micro-app vive bajo /apps/infra/
  const PUBLIC_BASE = env.VITE_PUBLIC_BASE_PATH || '/apps/infra/'

  return {
    base: isProd ? PUBLIC_BASE : '/',

    plugins: [react()],

    resolve: {
      alias: { '@': fileURLToPath(new URL('./src', import.meta.url)) },
      dedupe: ['react', 'react-dom']
    },

    server: {
      host: DEV_HOST,
      port: DEV_PORT,
      strictPort: true,
      open: true,
      // Headers solo para DEV: permiten que la app principal la embeza en <iframe>
      headers: {
        // Nota: no uses X-Frame-Options=ALLOWALL (no es válido). frame-ancestors manda.
        'Access-Control-Allow-Origin': '*',
        'Content-Security-Policy': "frame-ancestors 'self' http://localhost:5173 http://127.0.0.1:5173"
      },
      watch: { usePolling: true, interval: 200 } // útil con OneDrive/antivirus
    },

    preview: {
      host: DEV_HOST,
      port: PREV_PORT,
      strictPort: true
    },

    build: {
      outDir: 'dist',
      target: 'esnext',
      sourcemap: !isProd
    },

    define: {
      __APP_VERSION__: JSON.stringify(env.VITE_APP_VERSION || 'dev')
    }
  }
})
